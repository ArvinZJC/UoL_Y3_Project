'''
@Description: an API call dictionary generator
@Version: 1.0.1.20200221
@Author: Arvin Zhao
@Date: 2020-02-18 16:45:10
@Last Editors: Arvin Zhao
@LastEditTime: 2020-02-21 00:44:35
'''

from androguard.core.analysis import analysis
from androguard.core.bytecodes import apk, dvm
import numpy as np
import os
import pickle
import re
import sys

from logger import Logger


# max_h = 100
# max_calls = 100


def generate_dictionary(path_list) -> dict:
	'''
	TODO: Generate a dictionary for storing mapping all distinct API calls to numbers in the dataset and pickle the dictionary.

	:param path_list: TODO:
	:returns: a dictionary of API calls
	'''

	log = Logger(os.path.basename(__file__), sys._getframe().f_code.co_name)

	api_call_dictionary = {}

	for path in path_list:
		count = 0

		try:
			for file in os.listdir(path):
				count += 1

				if count == 300:
					break

				path = os.path.join(path, file)

				if path.endswith('.apk'):
					app = apk.APK(path)
					app_dex = dvm.DalvikVMFormat(app.get_dex())
				else: 
					app_dex = dvm.DalvikVMFormat(open(path, 'rb').read())

				app_x = analysis.newVMAnalysis(app_dex)

				method_list = []
				cs = [cc.get_name() for cc in app_dex.get_classes()]

				ctr = 0

				for method in app_dex.get_methods():
					g = app_x.get_method(method)

					if method.get_code() == None:
						continue
					
					for i in g.get_basic_blocks().get():
						for ins in i.get_instructions():
							output = ins.get_output() # this is a string that contains methods, variables, or anything else
							match = re.search(r'(L[^;]*;)->[^\(]*\([^\)]*\).*', output)

							if match and match.group(1) not in cs:
								method_list.append(match.group())

								if not api_call_dictionary.has_key(match.group()):
									api_call_dictionary[match.group()] = len(api_call_dictionary)
		except:
			log.e('An exception occurred.')

	return api_call_dictionary


# test purposes only
if __name__ == '__main__':
	common_dict = generate_dictionary(['Dataset/all_benign','Dataset/all_drebin'])
	fp = open('15IT201_15IT217_M1_common_dict_300' + '.save', 'wb')
	
	pickle.dump(common_dict, fp, protocol = pickle.HIGHEST_PROTOCOL)
	fp.close()

	print(len(common_dict)) # logger?