'''
@Description: a logger that can take a log of messages with the level INFO, WARNING, or ERROR
@Version: 1.2.0.20200323
@Author: Arvin Zhao
@Date: 2020-02-19 17:01:54
@Last Editors: Arvin Zhao
@LastEditTime: 2020-03-23 19:09:00
'''

import datetime
import logging
import os


class Logger:
    '''
    This class contains functions to add a message with the level INFO, WARNING, or ERROR to the specified logfile (if enabled) and the
    console. To instantiate a logger (an object of the class), you can import Logger and simply add the code `log = Logger(<file_name>,
    <function_name>)`. Then, you can add a message to the console. For example, to add a message with the level INFO, add the code
    `log.i('Hello World!')`.
    
    Parameters
    ----------
    file_name : the file name of the module called the logger

    function_name : the name of the function called the logger

    has_logfiles : a boolean value indicating whether to enable to add a message to the specified logfile (default: False)
    '''

    def __init__(self, file_name, function_name, has_logfiles = False):
        '''
        To instantiate a logger (an object of the class), you should use this constructor.

        Parameters
        ----------
        file_name : the file name of the module called the logger

        function_name : the name of the function called the logger

        has_logfiles : a boolean value indicating whether to enable to add a message to the specified logfile (default: False)
        '''
        
        self.logger = logging.getLogger(file_name)
        self.logger.setLevel(logging.INFO)
        log_format = logging.Formatter('[%(asctime)s][%(levelname)s][%(threadName)s: %(message)s')
        
        if has_logfiles:
            logfile_directory = 'logs/'

            if not os.path.exists(logfile_directory):
                os.makedirs(logfile_directory)

            file_handler = logging.FileHandler('logs/' + datetime.date.today().strftime('%Y-%m-%d') + '.log')
            file_handler.setFormatter(log_format)
            self.logger.addHandler(file_handler)

        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(log_format)
        self.logger.addHandler(stream_handler)
        
        self._tag = file_name + '/' + function_name


    '''
    Add a message with the level INFO.

    Parameters
    ----------
    message : the message decided to show
    '''
    i = lambda self, message: self.logger.info(self._tag + '] ' + message)


    '''
    Add a message with the level WARNING.

    Parameters
    ----------
    message : the message decided to show
    '''
    w = lambda self, message: self.logger.warning(self._tag + '] ' + message)


    '''
    Add a message and info of an exception (if any) with the level ERROR. You are strongly suggested to use this function only when an
    exception occurs. You do not need to pass an exception object as an parameter - simply use this function in the "except" block of a
    "try...except" statement.

    Parameters
    ----------
    message : the message decided to show
    '''
    e = lambda self, message: self.logger.error(self._tag + '] ' + message, exc_info = True)


# test purposes only
if __name__ == '__main__':
    '''
    initialise a logger;
    another initialisation example: `log = Logger(os.path.basename(__file__), sys._getframe().f_code.co_name, True)`
    '''
    log = Logger(os.path.basename(__file__), __name__)

    log.i('Hello World!')
    log.w('Nothing in the list.')

    try:
        2 / 0
    except:
        log.e('Failed to do the calculation. An exception occurred.')