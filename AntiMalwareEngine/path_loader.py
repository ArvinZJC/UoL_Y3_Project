'''
@Description: a directory/path loader
@Version: 1.2.6.20200412
@Author: Jichen Zhao
@Date: 2020-03-22 11:31:45
@Last Editors: Jichen Zhao
@LastEditTime: 2020-04-12 17:33:18
'''

import os
import sys

from logger import Logger


data_directory = 'data'


def get_data_directory() -> str:
    '''
    Get the directory of the place storing data.

    Returns
    -------
    data_directory : the directory of the place storing data
    '''

    if not os.path.exists(data_directory):
        os.makedirs(data_directory)
    
    return data_directory


def get_benign_apps_directory() -> str:
    '''
    Get the directory of the benign app dataset.

    Returns
    -------
    benign_apps_directory : the directory of the benign app dataset
    '''

    benign_apps_directory = os.path.join(data_directory, 'benign')

    if not os.path.exists(benign_apps_directory):
        os.makedirs(benign_apps_directory)
        Logger(os.path.basename(__file__), sys._getframe().f_code.co_name).w('The benign app dataset might need checking because it contains nothing.') # initialise a logger and add a message with the level WARNING
    
    return benign_apps_directory


def get_malware_directory() -> str:
    '''
    Get the directory of the malware dataset.

    Returns
    -------
    malware_directory : the directory of the malware dataset
    '''

    malware_directory = os.path.join(data_directory, 'malicious')

    if not os.path.exists(malware_directory):
        os.makedirs(malware_directory)
        Logger(os.path.basename(__file__), sys._getframe().f_code.co_name).w('The malware dataset might need checking because it contains nothing.') # initialise a logger and add a message with the level WARNING
    
    return malware_directory


def get_dictionary_path() -> str:
    '''
    Get the path of the API call dictionary.

    Returns
    -------
    dictionary_path : the path of the API call dictionary
    '''

    return os.path.join(data_directory, 'api_call_dictionary.save')


def get_compressed_features_directory() -> list:
    '''
    Get the directory of compressed features.

    Returns
    -------
    compressed_features_directory : the directory of compressed features
    '''

    compressed_features_directory = os.path.join(data_directory, 'compressed_features')

    if not os.path.exists(compressed_features_directory):
        os.makedirs(compressed_features_directory)

    return compressed_features_directory


def get_test_set_directory() -> str:
    '''
    Get the directory of the test set.

    Returns
    -------
    test_set_directory : the directory of the test set
    '''

    test_set_directory = os.path.join(data_directory, 'test_set')

    if not os.path.exists(test_set_directory):
        os.makedirs(test_set_directory)
        Logger(os.path.basename(__file__), sys._getframe().f_code.co_name).w('The test set might need checking because it contains nothing.') # initialise a logger and add a message with the level WARNING

    return test_set_directory


def get_cnn_trainer_saver_path() -> str:
    '''
    Get the path of the checkpoint files from the saver when training a CNN with a stacked autoencoder.

    Returns
    -------
    cnn_trainer_saver_path : the path of the checkpoint files from the saver when training a CNN with a stacked autoencoder
    '''
    
    cnn_trainer_saver_directory = os.path.join(data_directory, 'cnn_trainer_saver')

    if not os.path.exists(cnn_trainer_saver_directory):
        os.makedirs(cnn_trainer_saver_directory)

    return os.path.join(cnn_trainer_saver_directory, 'cnn_trainer.ckpt')


# test purposes only
if __name__ == '__main__':
    log = Logger(os.path.basename(__file__), __name__) # initialise a logger

    log.i(get_benign_apps_directory())
    log.i(get_malware_directory())

    dictionary_path = get_dictionary_path()

    if not os.path.exists(dictionary_path):
        log.w('Failed to find the API call dictionary. Some errors might occur.')
    
    log.i(dictionary_path)
    log.i(get_compressed_features_directory())
    log.i(get_test_set_directory())
    log.i(get_cnn_trainer_saver_path())