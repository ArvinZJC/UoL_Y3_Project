apply plugin: 'com.android.application'
apply plugin: 'com.chaquo.python'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    ndkVersion '20.0.5594570'

    def currentVersionCode = getVersionCode()

    defaultConfig {
        applicationId 'com.arvinzjc.xshielder'
        minSdkVersion 23
        targetSdkVersion 29
        versionCode currentVersionCode
        versionName '1.0.0'
        python {
            buildPython 'py -3.8' // select a suitable version according to the version of Python installed on Windows and the requirements of Python packages
            pip {
                install 'androguard==3.3.5'
                install 'numpy==1.17.4'
                install 'tensorflow==2.1.0'
                install 'git+https://github.com/google-research/tf-slim'
            }
        }
    }

    flavorDimensions 'abi'
    productFlavors {
        arm_32 {
            dimension 'abi'
            ndk { abiFilters 'armeabi-v7a' }
        }
        arm_64 {
            dimension 'abi'
            ndk { abiFilters 'arm64-v8a' }
        }
        x86 {
            dimension 'abi'
            ndk { abiFilters 'x86' }
        }
        x86_64 {
            dimension 'abi'
            ndk { abiFilters 'x86_64' }
        }
    }

    splits {
        abi {
            enable true
            universalApk true
        }
    }

    sourceSets { main { jniLibs.srcDir 'libs' } }

    buildTypes {
        release {
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    viewBinding { enabled = true }
}

// increase the version code automatically after each release task and get the version code
def getVersionCode() {
    def versionCodeFileName = 'version-code.properties'
    def versionCodePropertyName = 'VERSION_CODE'
    def versionCodeFile = file(versionCodeFileName)

    if (versionCodeFile.canRead()) {
        Properties versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionCodeFile))

        if (versionProperties[versionCodePropertyName] != null) {
            def versionCode = versionProperties[versionCodePropertyName].toInteger()
            def runTasks = gradle.startParameter.taskNames

            if (':app:assembleRelease' in runTasks) {
                versionProperties[versionCodePropertyName] = (++versionCode).toString()
                versionProperties.store(versionCodeFile.newWriter(), null)
            } // end if

            return versionCode
        } else
            throw new GradleException('The property "' + versionCodePropertyName + '" not found.')
    } else
        throw new GradleException('The file "' + versionCodeFileName + '" not found.')
} // end method getVersionCode

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha02'
    implementation 'com.apkfuns.log2file:log2file:1.3.1'
    implementation 'com.apkfuns.logutils:library:1.7.5'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'com.github.TutorialsAndroid:FilePicker:v7.0.19'
    implementation 'com.github.xuexiangjys:XUI:1.1.3'
    implementation 'com.google.android.material:material:1.2.0-alpha05'
    implementation 'com.mikepenz:iconics-core:4.0.2'
    implementation 'com.mikepenz:iconics-views:4.0.2'
    implementation 'com.mikepenz:ionicons-typeface:2.0.1.5-kotlin@aar'
    implementation 'com.mikepenz:material-design-iconic-typeface:2.2.0.6-kotlin@aar'
}