'''
@Description: an API call dictionary generator
@Version: 1.1.3.20200322
@Author: Arvin Zhao
@Date: 2020-02-18 16:45:10
@Last Editors: Arvin Zhao
@LastEditTime: 2020-03-22 12:01:45
'''

from androguard.core.analysis import analysis
from androguard.core.bytecodes import apk, dvm
import numpy as np
import os
import pickle
import re
import sys

from logger import Logger
from path_loader import get_benign_apps_directory, get_dictionary_path, get_malware_directory


def generate_dictionary(directory_list) -> dict:
	'''
	Generate a dictionary storing mapping all distinct API calls to numbers in the dataset and pickle the dictionary.

	:param directory_list: a list of dataset directories (each dataset is suggested to contain no more than 300 apps)
	:returns: a dictionary of API calls
	'''

	log = Logger(os.path.basename(__file__), sys._getframe().f_code.co_name) # initialise a logger

	api_call_dictionary = {}

	for directory in directory_list:
		count = 0

		try:
			for file in os.listdir(directory):
				count += 1

				# process up to 300 apps in a dataset directory
				if count > 300:
					break

				directory = os.path.join(directory, file)

				if directory.endswith('.apk'):
					app = apk.APK(directory)
					app_dex = dvm.DalvikVMFormat(app.get_dex())
				else: 
					app_dex = dvm.DalvikVMFormat(open(directory, 'rb').read())

				app_x = analysis.Analysis(app_dex)

				method_list = []
				class_names = [classes.get_name() for classes in app_dex.get_classes()]

				for method in app_dex.get_methods():
					g = app_x.get_method(method)

					if method.get_code() == None:
						continue
					
					for i in g.get_basic_blocks().get():
						for ins in i.get_instructions():
							output = ins.get_output() # this is a string that contains methods, variables, or anything else
							match = re.search(r'(L[^;]*;)->[^\(]*\([^\)]*\).*', output)

							if match and match.group(1) not in class_names:
								method_list.append(match.group())

								if not api_call_dictionary.__contains__(match.group()):
									api_call_dictionary[match.group()] = len(api_call_dictionary)
		except Exception as e:
			log.e('Failed to generate and pickle a dictionary. An exception occurred.\n' + repr(e))

	return api_call_dictionary


# test purposes only
if __name__ == '__main__':
	api_call_dictionary = generate_dictionary([get_benign_apps_directory(), get_malware_directory()])
	
	dictionary_stream = open(get_dictionary_path(), 'wb')
	pickle.dump(api_call_dictionary, dictionary_stream, protocol = pickle.HIGHEST_PROTOCOL)
	dictionary_stream.close()

	log = Logger(os.path.basename(__file__), __name__)
	log.i('Number of items in the API call dictionary: ' + str(len(api_call_dictionary)))