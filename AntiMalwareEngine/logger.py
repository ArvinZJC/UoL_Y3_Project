'''
@Description: a logger that can take a log of messages with the level INFO, WARNING, or ERROR
@Version: 1.1.1.20200226
@Author: Arvin Zhao
@Date: 2020-02-19 17:01:54
@Last Editors: Arvin Zhao
@LastEditTime: 2020-02-26 14:16:10
'''

import datetime
import logging
import os


class Logger:
    '''
    This class contains functions to add a message with the level INFO, WARNING, or ERROR to the specified log file and the console. To
    instantiate a logger (an object of the class), you can simply add the code "log = Logger(<file_name>, <function_name>)". Then, you
    can add a message to the specified log file and the console. For example, to add a message with the level INFO, add the code
    "log.i('Hello World!')".
    
    :param file_name: the file name of the module called the logger
    :param function_name: the name of the function called the logger
    '''

    def __init__(self, file_name, function_name):
        '''
        To instantiate a logger (an object of the class), you should use this constructor.

        :param file_name: the file name of the module called the logger
        :param function_name: the name of the function called the logger
        '''

        logfile_directory = 'logs/'

        if not os.path.exists(logfile_directory):
            os.makedirs(logfile_directory)
        
        self.logger = logging.getLogger(file_name)
        self.logger.setLevel(logging.INFO)
        log_format = logging.Formatter('[%(asctime)s.%(msecs)03d][%(levelname)s][%(threadName)s: %(message)s')
        
        file_handler = logging.FileHandler('logs/' + datetime.date.today().strftime('%Y-%m-%d') + '.log')
        file_handler.setFormatter(log_format)
        self.logger.addHandler(file_handler)

        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(log_format)
        self.logger.addHandler(stream_handler)
        
        self._tag = file_name + '/' + function_name


    '''
    Add a message with the level INFO to the specified log file and the console.

    :param message: the message decided to show
    '''
    i = lambda self, message: self.logger.info(self._tag + ']' + message)


    '''s
    Add a message with the level WARNING to the specified log file and the console.

    :param message: the message decided to show
    '''
    w = lambda self, message: self.logger.warning(self._tag + ']' + message)


    '''
    Add a message and info of an exception (if any) with the level ERROR to the specified log file and the console. You are strongly
    suggested to use this function only when an exception occurs. You do not need to pass an exception object as an parameter - simply
    use this function in the "except" block of a "try...except" statement.

    :param message: the message decided to show
    '''
    e = lambda self, message: self.logger.error(self._tag + ']' + message, exc_info = True)


# test purposes only
if __name__ == '__main__':
    log = Logger(os.path.basename(__file__), __name__)

    log.i('Hello World!')
    log.w('Nothing in the list.')

    try:
        2 / 0
    except:
        log.e('An exception occurred.')