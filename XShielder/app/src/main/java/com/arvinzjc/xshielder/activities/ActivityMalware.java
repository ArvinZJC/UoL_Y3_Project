/*
 * @Description: a class for the activity of the anti-malware shield
 * @Version: 1.2.6.20200303
 * @Author: Arvin Zhao
 * @Date: 2020-02-02 17:17:45
 * @Last Editors: Arvin Zhao
 * @LastEditTime : 2020-03-03 17:19:38
 */

package com.arvinzjc.xshielder.activities;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import com.apkfuns.logutils.LogUtils;
import com.arvinzjc.xshielder.AppInitialiser;
import com.arvinzjc.xshielder.R;
import com.arvinzjc.xshielder.utils.AppUtils;
import com.arvinzjc.xshielder.utils.SystemBarThemeUtils;
import com.mikepenz.iconics.IconicsColorInt;
import com.mikepenz.iconics.IconicsDrawable;
import com.mikepenz.iconics.IconicsSizeDp;
import com.mikepenz.iconics.typeface.library.ionicons.Ionicons;
import com.mikepenz.iconics.view.IconicsImageView;
import com.xuexiang.xui.utils.ViewUtils;
import com.xuexiang.xui.widget.button.roundbutton.RoundButton;
import com.xuexiang.xui.widget.dialog.materialdialog.DialogAction;
import com.xuexiang.xui.widget.dialog.materialdialog.MaterialDialog;
import com.xuexiang.xui.widget.grouplist.XUICommonListItemView;
import com.xuexiang.xui.widget.grouplist.XUIGroupListView;
import com.xuexiang.xui.widget.progress.CircleProgressView;

public class ActivityMalware extends AppCompatActivity
{
    private static final String APK_FOLDER = "/apks/"; // the folder under an app-specific cache directory for storing APKs for scanning
    private static final String APK_EXTENSION = ".apk";
    private static final int THREAD_TASK_TIMEOUT = 30; // the maximum time (unit: minute) to wait for thread tasks to complete execution
    private static final int MALWARE_UNINSTALLING_REQUEST = 0;  // the code of the request of uninstalling a malware
    private static final int ALL_MALWARE_UNINSTALLING_REQUEST = 1; // the code of the request of uninstalling all malware
    private static final int ALL_MALWARE_UNINSTALLING_FLAG_REQUEST = 2; // the code of the request of uninstalling all malware and updating results
    private static final int UNKNOWN_APP_UNINSTALLING_REQUEST = 3;  // the code of the request of uninstalling an unknown app
    private static final int BENIGN_APP_UNINSTALLING_REQUEST = 4;  // the code of the request of uninstalling a benign app

    private int mScanTaskCount, mCompletedScanTaskCount, mNonSystemAppCount, mMalwareListItemCount, mUnknownAppCount, mBenignAppCount, mAnimationDuration;
    private boolean mIsFirstScan = true;
    private Configuration mConfiguration;
    private File mApkFolder; // a File object containing the absolute path to the folder storing APKs for scanning
    private AppInitialiser.FinalResults mFinalResult = null;
    private PackageManager mPackageManager;
    private ApplicationInfo mUninstalledAppInfo;
    private ArrayList<ApplicationInfo> mNonSystemAppInfoList = new ArrayList<>(),
            mMalwareInfoList = new ArrayList<>(),
            mUnknownAppInfoList = new ArrayList<>(),
            mBenignAppInfoList = new ArrayList<>();
    private HashMap<String, Drawable> mNonSystemAppIconMap = new HashMap<>();
    private HashMap<String, String> mNonSystemAppNameMap = new HashMap<>();
    private ExecutorService mExecutorServiceScan;
    private CircleProgressView mCircleProgressViewMalware;
    private IconicsImageView mImageViewMalware;
    private TextView mTextViewMalwareRationale;
    private LinearLayout mLinearLayoutMalwareResults;
    private XUIGroupListView mGroupListViewMalwareResults;
    private XUIGroupListView.Section mGroupListViewSectionMalwareList, mGroupListViewSectionUnknownAppList, mGroupListViewSectionBenignAppList;
    private IconicsDrawable mDrawableUnknown, mDrawableBigUnknown;
    private RoundButton mRoundButtonMalwareAction;
    private MaterialDialog mDialogueScanStopConfirmation, mDialogueIssueDisregardConfirmation, mDialogueAllSystemApps;
    private Handler mHandlerMalware;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        LogUtils.i("Enter the activity of the anti-malware shield.");
        mConfiguration = getResources().getConfiguration();
        SystemBarThemeUtils.changeStatusBarTheme(this, mConfiguration);
        SystemBarThemeUtils.changeNavigationBarTheme(this, mConfiguration, getColor(R.color.app_themeColour));
        setContentView(R.layout.activity_malware);
        setSupportActionBar(findViewById(R.id.toolbarMalware));

        if (getSupportActionBar() != null)
            getSupportActionBar().setDisplayHomeAsUpEnabled(true); // enable the Up button for this activity whose parent activity is the home activity
        else
            LogUtils.w("Failed to get this activity's action bar. Some errors might occur.");

        String apkPath = AppUtils.getAppCacheDirectory(this) + APK_FOLDER; // the absolute path to the directory storing APKs for scanning

        mApkFolder = new File(apkPath);
        mPackageManager = getPackageManager();
        mNonSystemAppInfoList = AppUtils.getNonSystemAppInfoList(this, mPackageManager);
        mNonSystemAppCount = mNonSystemAppInfoList.size();

        /*
         * the number of scan tasks = 2 basic tasks + the number of non-system apps;
         * 2 basic tasks refer to getting the info list of non-system apps and being ready for displaying results
         */
        mScanTaskCount = 2 + mNonSystemAppCount;

        mAnimationDuration = getResources().getInteger(android.R.integer.config_mediumAnimTime); // 400 milliseconds
        mExecutorServiceScan = Executors.newSingleThreadExecutor();
        mCircleProgressViewMalware = findViewById(R.id.circleProgressViewMalware);
        mImageViewMalware = findViewById(R.id.imageViewMalware);
        mTextViewMalwareRationale = findViewById(R.id.textViewMalwareRationale);
        mLinearLayoutMalwareResults = findViewById(R.id.linearLayoutMalwareResults);
        mGroupListViewMalwareResults = findViewById(R.id.groupListViewMalwareResults);
        mDrawableUnknown = new IconicsDrawable(this)
                .icon(Ionicons.Icon.ion_help)
                .color(new IconicsColorInt(getColor(R.color.colourWarning)))
                .size(new IconicsSizeDp(AppInitialiser.RESULT_ICON_SIZE));
        mDrawableBigUnknown = new IconicsDrawable(this)
                .icon(Ionicons.Icon.ion_ios_help)
                .color(new IconicsColorInt(getColor(R.color.colourWarning)))
                .size(new IconicsSizeDp(AppInitialiser.FINAL_RESULT_ICON_SIZE));
        mRoundButtonMalwareAction = findViewById(R.id.roundButtonMalwareAction);
        mRoundButtonMalwareAction.setOnClickListener((View view) ->
        {
            if (mRoundButtonMalwareAction.getText().equals(getString(R.string.malware_roundButtonAction_fail)))
            {
                LogUtils.i("User chose to uninstall all malware.");

                int malwareListItemCount = mMalwareListItemCount;

                for (int count = 0; count < malwareListItemCount; count++)
                    if (count == malwareListItemCount - 1)
                        startUninstalling(mMalwareInfoList.get(count), ALL_MALWARE_UNINSTALLING_FLAG_REQUEST);
                    else
                        startUninstalling(mMalwareInfoList.get(count), ALL_MALWARE_UNINSTALLING_REQUEST);
            }
            else
            {
                LogUtils.i("User chose to scan for malware again.");
                rescan();
            } // end if...else
        });
        mHandlerMalware = new Handler((Message message) ->
        {
            switch (message.what)
            {
                case AppInitialiser.PROGRESS_INCREMENT_FLAG:
                    mCircleProgressViewMalware.setProgress(++mCompletedScanTaskCount * 100f / mScanTaskCount);
                    if (mCompletedScanTaskCount == mScanTaskCount && mNonSystemAppCount > 0)
                        playAnimationAfterProgress();
                    return true;

                case AppInitialiser.PROGRESS_INITIALISATION_FLAG:
                    mCircleProgressViewMalware.setProgress(AppInitialiser.START_PROGRESS);
                    return true;

                case AppInitialiser.PROGRESS_ERROR_FLAG:
                    mCompletedScanTaskCount = mScanTaskCount;
                    mCircleProgressViewMalware.setProgress(AppInitialiser.END_PROGRESS);
                    playAnimationAfterProgress();
                    return true;

                default:
                    LogUtils.w("Received abnormal handler message flag (" + message.what + "). Some errors might occur.");
                    return false;
            } // end switch-case
        });

        // hide all widgets except the toolbar and the circle progress view
        mImageViewMalware.setVisibility(View.INVISIBLE);
        mTextViewMalwareRationale.setVisibility(View.INVISIBLE);
        mLinearLayoutMalwareResults.setVisibility(View.INVISIBLE);

        (new Handler()).postDelayed(() -> mExecutorServiceScan.execute(() -> getMalwareResults(mIsFirstScan)), mAnimationDuration);
    } // end method onCreate

    /**
     * Dispatch incoming results to this activity.
     * @param requestCode the request code to identify who the results came from
     * @param resultCode the result code returned by the child activity
     * @param data an Intent which can return result data to the caller
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode != MALWARE_UNINSTALLING_REQUEST
                && requestCode != ALL_MALWARE_UNINSTALLING_REQUEST
                && requestCode != ALL_MALWARE_UNINSTALLING_FLAG_REQUEST
                && requestCode != UNKNOWN_APP_UNINSTALLING_REQUEST
                && requestCode != BENIGN_APP_UNINSTALLING_REQUEST)
        {
            LogUtils.w("Received abnormal request code to identify who the results came from (" + requestCode + "). Some errors might occur.");
            return;
        } // end if

        if (requestCode == ALL_MALWARE_UNINSTALLING_FLAG_REQUEST)
        {
            ArrayList<ApplicationInfo> uninstalledMalwareInfoList = new ArrayList<>();

            for (ApplicationInfo malwareInfo : mMalwareInfoList)
            {
                if (AppUtils.isInstalled(this, mPackageManager, malwareInfo))
                    LogUtils.i("User chose not to uninstall an app (" + malwareInfo.packageName + ").");
                else
                {
                    LogUtils.i("User chose to uninstall an app (" + malwareInfo.packageName + ").");
                    mNonSystemAppInfoList.remove(malwareInfo);
                    mNonSystemAppIconMap.remove(malwareInfo.packageName);
                    mNonSystemAppNameMap.remove(malwareInfo.packageName);
                    uninstalledMalwareInfoList.add(malwareInfo);
                } // end if...else
            } // end for

            if (uninstalledMalwareInfoList.size() > 0)
            {
                mUninstalledAppInfo = null;
                mNonSystemAppCount = mNonSystemAppInfoList.size();
                mMalwareInfoList.removeAll(uninstalledMalwareInfoList);
                mMalwareListItemCount = mMalwareInfoList.size();
                updateResults(ALL_MALWARE_UNINSTALLING_FLAG_REQUEST);
            } // end if
        }
        else
        {
            if (AppUtils.isInstalled(this, mPackageManager, mUninstalledAppInfo))
                LogUtils.i("User chose not to uninstall an app (" + mUninstalledAppInfo.packageName + ").");
            else
            {
                LogUtils.i("User chose to uninstall an app (" + mUninstalledAppInfo.packageName + ").");
                updateResults(requestCode);
            } // end if...else
        } // end if...else
    } // end method onActivityResult

    /**
     * Confirm stopping checking Wi-Fi security when the back button is pressed and the scan is not completed.
     */
    @Override
    public void onBackPressed()
    {
        confirmBeforeLeaving();
    } // end method onBackPressed

    /**
     * Recreate the activity when the configuration of the dark theme is changed.
     * @param configuration the device configuration info
     */
    @Override
    public void onConfigurationChanged(@NonNull Configuration configuration)
    {
        super.onConfigurationChanged(configuration);
        recreate();
    } // end method onConfigurationChanged

    /**
     * Perform some necessary tasks when destroying this activity.
     */
    @Override
    public void onDestroy()
    {
        super.onDestroy();

        if (mDialogueScanStopConfirmation != null)
            mDialogueScanStopConfirmation.dismiss();

        if (mDialogueIssueDisregardConfirmation != null)
            mDialogueIssueDisregardConfirmation.dismiss();

        if (mDialogueAllSystemApps != null)
            mDialogueAllSystemApps.dismiss();

        if (mNonSystemAppCount > 0)
        {
            mNonSystemAppInfoList.clear();
            mNonSystemAppIconMap.clear();
            mNonSystemAppNameMap.clear();
        } // end if

        if (mMalwareListItemCount > 0)
            mMalwareInfoList.clear();

        if (mUnknownAppCount > 0)
            mUnknownAppInfoList.clear();

        if (mBenignAppCount > 0)
            mBenignAppInfoList.clear();

        if (mApkFolder.exists())
            AppUtils.deleteOldApks(mApkFolder);

        mExecutorServiceScan.shutdownNow();
        LogUtils.getLog2FileConfig().flushAsync(); // flush log cache to record logs in log files
    } // end method onDestroy

    /**
     * Respond to the selected event of the menu item on this activity's tool bar.
     * @param menuItem the menu item selected
     * @return  true to consume it here, or false to allow normal menu processing to proceed
     */
    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem menuItem)
    {
        if (menuItem.getItemId() == android.R.id.home)
        {
            confirmBeforeLeaving();
            return true;
        } // end if

        return super.onOptionsItemSelected(menuItem);
    } // end method onOptionsItemSelected

    // show a confirmation dialogue when necessary before finishing this activity
    private void confirmBeforeLeaving()
    {
        if (mCompletedScanTaskCount < mScanTaskCount)
            mDialogueScanStopConfirmation = new MaterialDialog.Builder(this)
                    .backgroundColor(getColor(R.color.card_backgroundColour))
                    .icon(new IconicsDrawable(this)
                            .icon(Ionicons.Icon.ion_information_circled)
                            .color(new IconicsColorInt(getColor(R.color.colourInfo)))
                            .size(new IconicsSizeDp(AppInitialiser.DIALOGUE_ICON_SIZE)))
                    .title(R.string.dialogueScanStopConfirmation_title)
                    .titleColor(getColor(R.color.primaryTextColour))
                    .content(R.string.malware_dialogueScanStopConfirmation_content)
                    .contentColor(getColor(R.color.contentTextColour))
                    .positiveText(R.string.dialogueScanStopConfirmation_positiveText)
                    .positiveColor(getColor(R.color.colourInfo))
                    .onPositive((MaterialDialog dialogue, DialogAction which) ->
                    {
                        // stop scanning for malware if the user clicks the confirmation button when the scan is not completed
                        if (mCompletedScanTaskCount < mScanTaskCount)
                        {
                            LogUtils.i("User chose to stop scanning for malware.");
                            finish();
                        } // end if
                    })
                    .negativeText(R.string.dialogue_defaultNegativeText)
                    .negativeColor(getColor(R.color.colourInfo))
                    .cancelable(false)
                    .show(); // show a confirmation dialogue asking whether to stop scanning for malware when the scan is not completed
        else
        {
            if (mFinalResult == AppInitialiser.FinalResults.FAIL)
                mDialogueIssueDisregardConfirmation = new MaterialDialog.Builder(this)
                        .backgroundColor(getColor(R.color.card_backgroundColour))
                        .icon(new IconicsDrawable(this)
                                .icon(Ionicons.Icon.ion_information_circled)
                                .color(new IconicsColorInt(getColor(R.color.colourInfo)))
                                .size(new IconicsSizeDp(AppInitialiser.DIALOGUE_ICON_SIZE)))
                        .title(R.string.dialogueIssueDisregardConfirmation_title)
                        .titleColor(getColor(R.color.primaryTextColour))
                        .content(R.string.malware_dialogueIssueDisregardConfirmation_content)
                        .contentColor(getColor(R.color.contentTextColour))
                        .positiveText(R.string.dialogueIssueDisregardConfirmation_positiveText)
                        .positiveColor(getColor(R.color.colourInfo))
                        .onPositive((MaterialDialog dialogue, DialogAction which) ->
                        {
                            LogUtils.i("User chose to disregard malware.");
                            finish();
                        })
                        .negativeText(R.string.dialogue_defaultNegativeText)
                        .negativeColor(getColor(R.color.colourInfo))
                        .cancelable(false)
                        .show(); // show a confirmation dialogue asking whether to disregard malware
            else
                finish();
        } // end if...else
    } // end method confirmBeforeLeaving

    // get malware scan results
    private void getMalwareResults(boolean isFirstScan)
    {
        mCompletedScanTaskCount = 0; // initialise the number of completed scan tasks

        if (!isFirstScan)
        {
            mNonSystemAppInfoList = AppUtils.getNonSystemAppInfoList(this, mPackageManager);
            mNonSystemAppCount = mNonSystemAppInfoList.size();
            mNonSystemAppIconMap.clear();
            mNonSystemAppNameMap.clear();

            if (mMalwareListItemCount > 0)
                mMalwareInfoList.clear();

            if (mUnknownAppCount > 0)
                mUnknownAppInfoList.clear();

            if (mBenignAppCount > 0)
                mBenignAppInfoList.clear();

            mMalwareListItemCount = 0;
            mUnknownAppCount = 0;
            mBenignAppCount = 0;
            mScanTaskCount = 2 + mNonSystemAppCount;
            mFinalResult = null;
            mUninstalledAppInfo = null;
        } // end if

        mHandlerMalware.sendEmptyMessage(AppInitialiser.PROGRESS_INCREMENT_FLAG); // complete getting the info list of non-system apps

        if (mNonSystemAppCount > 0)
        {
            runOnUiThread(() ->
            {
                if (isFirstScan)
                {
                    XUIGroupListView.newSection(this).setDescription(getString(R.string.malware_appList_discription)).addTo(mGroupListViewMalwareResults);
                    XUIGroupListView.newSection(this).setDescription(" ").addTo(mGroupListViewMalwareResults); // this section is added to leave space between 2 sections
                } // end if

                initialiseMalwareList();
                initialiseUnknownAppList();
                initialiseBenignAppList();
            });

            if (mApkFolder.exists())
            {
                AppUtils.deleteOldApks(mApkFolder);
                performScanTasks();
            }
            else
            {
                if (mApkFolder.mkdirs())
                {
                    LogUtils.i("Successfully create the folder under an app-specific cache directory for storing APKs for scanning.");
                    performScanTasks();
                }
                else
                {
                    LogUtils.w("Failed to create the folder under an app-specific cache directory for storing APKs for scanning. Some errors might occur.");

                    for (ApplicationInfo nonSystemAppInfo : mNonSystemAppInfoList)
                    {
                        mNonSystemAppIconMap.put(nonSystemAppInfo.packageName, nonSystemAppInfo.loadIcon(mPackageManager));
                        mNonSystemAppNameMap.put(nonSystemAppInfo.packageName, nonSystemAppInfo.loadLabel(mPackageManager).toString());

                        XUICommonListItemView commonListItemViewUnknownApp = mGroupListViewMalwareResults.createItemView(
                                mNonSystemAppIconMap.get(nonSystemAppInfo.packageName),
                                mNonSystemAppNameMap.get(nonSystemAppInfo.packageName),
                                null,
                                XUICommonListItemView.HORIZONTAL,
                                XUICommonListItemView.ACCESSORY_TYPE_CUSTOM);
                        IconicsImageView imageViewUnknownApp = new IconicsImageView(this);
                        View.OnClickListener onClickListenerApp = view -> startUninstalling(nonSystemAppInfo, UNKNOWN_APP_UNINSTALLING_REQUEST);
                        runOnUiThread(() ->
                        {
                            imageViewUnknownApp.setIcon(mDrawableUnknown);
                            commonListItemViewUnknownApp.addAccessoryCustomView(imageViewUnknownApp);
                            mGroupListViewSectionUnknownAppList.addItemView(commonListItemViewUnknownApp, onClickListenerApp);
                        });
                    } // end for

                    mFinalResult = AppInitialiser.FinalResults.UNKNOWN;

                    runOnUiThread(() ->
                    {
                        mGroupListViewSectionUnknownAppList.setTitle(getString(R.string.malware_unknownAppList_title) + " (" + mNonSystemAppCount + "/" + mNonSystemAppCount + ")");
                        mGroupListViewSectionUnknownAppList.addTo(mGroupListViewMalwareResults);
                        mImageViewMalware.setIcon(mDrawableBigUnknown);
                        mTextViewMalwareRationale.setText(R.string.textViewRationale_unknown_appError);
                        mRoundButtonMalwareAction.setText(R.string.roundButtonAction_unknown);
                    });
                    mHandlerMalware.sendEmptyMessage(AppInitialiser.PROGRESS_ERROR_FLAG);
                } // end if...else
            } // end if...else
        }
        else
        {
            mHandlerMalware.sendEmptyMessage(AppInitialiser.PROGRESS_INCREMENT_FLAG); // ready for displaying results
            runOnUiThread(() -> mDialogueAllSystemApps = new MaterialDialog.Builder(this)
                    .backgroundColor(getColor(R.color.card_backgroundColour))
                    .icon(new IconicsDrawable(this)
                            .icon(Ionicons.Icon.ion_information_circled)
                            .color(new IconicsColorInt(getColor(R.color.colourInfo)))
                            .size(new IconicsSizeDp(AppInitialiser.DIALOGUE_ICON_SIZE)))
                    .title(R.string.malware_dialogueAllSystemApps_title)
                    .titleColor(getColor(R.color.primaryTextColour))
                    .content(R.string.malware_dialogueAllSystemApps_content)
                    .contentColor(getColor(R.color.contentTextColour))
                    .positiveText(R.string.dialogue_defaultPositiveText)
                    .positiveColor(getColor(R.color.colourInfo))
                    .onPositive((MaterialDialog dialogue, DialogAction which) ->
                    {
                        LogUtils.i("Return to the specified activity because all installed apps except this app can be considered as secured system apps.");
                        finish();
                    })
                    .cancelable(false)
                    .show() // show a dialogue informing the lack of third-party apps to scan for malware
            );
        } // end if...else
    } // end method getMalwareResults

    // initialise the section of the benign app list in the group list view
    private void initialiseBenignAppList()
    {
        if (mGroupListViewSectionBenignAppList != null)
            mGroupListViewSectionBenignAppList.removeFrom(mGroupListViewMalwareResults);

        mGroupListViewSectionBenignAppList = XUIGroupListView.newSection(this)
                .setSeparatorDrawableRes(R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector)
                .setLeftIconSize(AppInitialiser.APP_LIST_ICON_SIZE, AppInitialiser.APP_LIST_ICON_SIZE);
    } // end method initialiseBenignAppList

    // initialise the section of the malware list in the group list view
    private void initialiseMalwareList()
    {
        if (mGroupListViewSectionMalwareList != null)
            mGroupListViewSectionMalwareList.removeFrom(mGroupListViewMalwareResults);

        mGroupListViewSectionMalwareList = XUIGroupListView.newSection(this)
                .setDescription(" ") // this description is set so as to leave space between 2 sections
                .setSeparatorDrawableRes(R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector)
                .setLeftIconSize(AppInitialiser.APP_LIST_ICON_SIZE, AppInitialiser.APP_LIST_ICON_SIZE);
    } // end method initialiseMalwareList

    // initialise the section of the unknown app list in the group list view
    private void initialiseUnknownAppList()
    {
        if (mGroupListViewSectionUnknownAppList != null)
            mGroupListViewSectionUnknownAppList.removeFrom(mGroupListViewMalwareResults);

        mGroupListViewSectionUnknownAppList = XUIGroupListView.newSection(this)
                .setDescription(" ") // this description is set so as to leave space between 2 sections
                .setSeparatorDrawableRes(R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector,
                        R.drawable.list_item_background_selector)
                .setLeftIconSize(AppInitialiser.APP_LIST_ICON_SIZE, AppInitialiser.APP_LIST_ICON_SIZE);
    } // end method initialiseUnknownAppList

    // perform scan tasks when the number of non-system apps is over 0 and it is ready to store APKs for scanning in the folder under an app-specific cache directory
    private void performScanTasks()
    {
        ExecutorService executorServiceParallelTasks = Executors.newFixedThreadPool(AppInitialiser.CPU_CORE_COUNT + 1 < mNonSystemAppCount ? AppInitialiser.CPU_CORE_COUNT : mNonSystemAppCount);

        for (ApplicationInfo nonSystemAppInfo : mNonSystemAppInfoList)
        {
            executorServiceParallelTasks.execute(() ->
            {
                File newApk = new File(mApkFolder.getPath() + "/" + nonSystemAppInfo.packageName + APK_EXTENSION); // a File object containing the absolute path of a new APK file of a specified non-system app

                try
                {
                    if (newApk.createNewFile())
                    {
                        AppUtils.copyApk(nonSystemAppInfo, newApk);
                        // TODO: analyse apk (either benign or malicious if no error occurrs; in other words, only unknown when an error occurs)
                        mBenignAppInfoList.add(nonSystemAppInfo);
                    }
                    else
                    {
                        LogUtils.w("Failed to create a new APK file of a specified non-system app (" + nonSystemAppInfo.packageName + "). Some errors might occur.");
                        mUnknownAppInfoList.add(nonSystemAppInfo);
                    } // end if...else
                }
                catch (IOException e)
                {
                    LogUtils.e("Failed to copy the data of the source APK file of a specified non-system app (" + nonSystemAppInfo.packageName + ") to a new APK file. An exception occurred (" + e.getMessage() + ").");
                    LogUtils.e(e);
                    mUnknownAppInfoList.add(nonSystemAppInfo);
                } // end try...catch

                mNonSystemAppIconMap.put(nonSystemAppInfo.packageName, nonSystemAppInfo.loadIcon(mPackageManager));
                mNonSystemAppNameMap.put(nonSystemAppInfo.packageName, nonSystemAppInfo.loadLabel(mPackageManager).toString());
                mHandlerMalware.sendEmptyMessage(AppInitialiser.PROGRESS_INCREMENT_FLAG); // complete scanning an app
            });
        } // end for

        try
        {
            executorServiceParallelTasks.shutdown();

            if (!executorServiceParallelTasks.awaitTermination(THREAD_TASK_TIMEOUT, TimeUnit.MINUTES))
                executorServiceParallelTasks.shutdownNow();
        }
        catch (InterruptedException e)
        {
            LogUtils.e("The scan thread has been interrupted. An exception occurred (" + e.getMessage() + ").");
            LogUtils.e(e);
            executorServiceParallelTasks.shutdownNow();
            return;
        } // end try...catch

        if (mApkFolder.exists())
            AppUtils.deleteOldApks(mApkFolder);

        Collections.sort(mBenignAppInfoList, new ApplicationInfo.DisplayNameComparator(mPackageManager));
        mMalwareListItemCount = mMalwareInfoList.size();
        mUnknownAppCount = mUnknownAppInfoList.size();
        mBenignAppCount = mBenignAppInfoList.size();
        runOnUiThread(() ->
        {
            updateMalwareList();
            updateUnknownAppList();
            updateBenignAppList();
            updateFinalResults();
        });
        LogUtils.i("Successfully finish scanning for malware.");
        mHandlerMalware.sendEmptyMessage(AppInitialiser.PROGRESS_INCREMENT_FLAG); // ready for displaying results
    } // end method performScanTasks

    // play animation to hide the circle progress view and to display malware scan results
    private void playAnimationAfterProgress()
    {
        ViewUtils.fadeOut(mCircleProgressViewMalware, mAnimationDuration, null);
        (new Handler()).postDelayed(() ->
        {
            ViewUtils.fadeIn(mImageViewMalware, mAnimationDuration, null);
            ViewUtils.fadeIn(mTextViewMalwareRationale, mAnimationDuration, null);
            ViewUtils.slideIn(mLinearLayoutMalwareResults, mAnimationDuration, null, ViewUtils.Direction.BOTTOM_TO_TOP);
            SystemBarThemeUtils.changeNavigationBarTheme(this, mConfiguration, getColor(R.color.card_backgroundColour));
            mRoundButtonMalwareAction.setEnabled(true);
        }, mAnimationDuration / 2);
    } // end method playAnimationAfterProgress

    // rescan for malware
    private void rescan()
    {
        mRoundButtonMalwareAction.setEnabled(false); // avoid abnormal progress values when the user clicks quickly
        mHandlerMalware.sendEmptyMessage(AppInitialiser.PROGRESS_INITIALISATION_FLAG);
        ViewUtils.fadeOut(mImageViewMalware, mAnimationDuration, null);
        ViewUtils.fadeOut(mTextViewMalwareRationale, mAnimationDuration, null);
        ViewUtils.slideOut(mLinearLayoutMalwareResults, mAnimationDuration, null, ViewUtils.Direction.TOP_TO_BOTTOM);
        findViewById(R.id.nestedScrollViewMalwareResults).scrollTo(0, 0);
        (new Handler()).postDelayed(() ->
        {
            SystemBarThemeUtils.changeNavigationBarTheme(this, mConfiguration, getColor(R.color.app_themeColour));
            ViewUtils.fadeIn(mCircleProgressViewMalware, mAnimationDuration, null);
        }, mAnimationDuration / 2);

        mIsFirstScan = false;

        (new Handler()).postDelayed(() -> mExecutorServiceScan.execute(() -> getMalwareResults(mIsFirstScan)), mAnimationDuration);
    } // end method rescan

    // start uninstalling a specified app (if installed) with a specified request code
    private void startUninstalling(@NonNull ApplicationInfo appInfo, int requestCode)
    {
        mUninstalledAppInfo = appInfo;

        if (AppUtils.isInstalled(this, mPackageManager, mUninstalledAppInfo))
        {
            Intent intentAppUninstalling = new Intent(Intent.ACTION_DELETE, Uri.parse("package:" + mUninstalledAppInfo.packageName));

            if (requestCode == ALL_MALWARE_UNINSTALLING_REQUEST)
                startActivity(intentAppUninstalling);
            else
                startActivityForResult(intentAppUninstalling, requestCode);

            LogUtils.i("User was asked to confirm to uninstall an app (" + mUninstalledAppInfo.packageName + ").");
        }
        else
        {
            LogUtils.w("Failed to find an app (" + mUninstalledAppInfo.packageName + "). It might have been uninstalled.");
            Toast.makeText(getApplicationContext(),
                    mNonSystemAppNameMap.get(mUninstalledAppInfo.packageName) + " " + getString(R.string.malware_toastAppNotFound),
                    Toast.LENGTH_SHORT).show(); // the application context is required to avoid any abnormal toast styles
            updateResults(requestCode);
        } // end if...else
    } // end method startUninstalling

    // update malware scan results according to the request code when uninstalling an app or all malware
    private void updateResults(int requestCode)
    {
        if (mUninstalledAppInfo != null)
        {
            mNonSystemAppInfoList.remove(mUninstalledAppInfo);
            mNonSystemAppCount = mNonSystemAppInfoList.size();
            mNonSystemAppIconMap.remove(mUninstalledAppInfo.packageName);
            mNonSystemAppNameMap.remove(mUninstalledAppInfo.packageName);
        } // end if

        if (mNonSystemAppCount > 0)
        {
            ViewUtils.fadeOut(mImageViewMalware, mAnimationDuration, null);
            ViewUtils.fadeOut(mTextViewMalwareRationale, mAnimationDuration, null);

            switch (requestCode)
            {
                case MALWARE_UNINSTALLING_REQUEST:
                case ALL_MALWARE_UNINSTALLING_FLAG_REQUEST:
                    if (mUninstalledAppInfo != null)
                    {
                        mMalwareInfoList.remove(mUninstalledAppInfo);
                        mMalwareListItemCount = mMalwareInfoList.size();
                    } // end if
                    initialiseMalwareList();
                    updateMalwareList();
                    if (mUnknownAppCount > 0)
                    {
                        mGroupListViewSectionUnknownAppList.removeFrom(mGroupListViewMalwareResults);
                        mGroupListViewSectionUnknownAppList.setTitle(getString(R.string.malware_unknownAppList_title) + " (" + mUnknownAppCount + "/" + mNonSystemAppCount + ")");
                        mGroupListViewSectionUnknownAppList.addTo(mGroupListViewMalwareResults);
                    } // end if
                    if (mBenignAppCount > 0)
                    {
                        mGroupListViewSectionBenignAppList.removeFrom(mGroupListViewMalwareResults);
                        mGroupListViewSectionBenignAppList.setTitle(getString(R.string.malware_benignAppList_title) + " (" + mBenignAppCount + "/" + mNonSystemAppCount + ")");
                        mGroupListViewSectionBenignAppList.addTo(mGroupListViewMalwareResults);
                    } // end if
                    updateFinalResults();
                    break;

                case UNKNOWN_APP_UNINSTALLING_REQUEST:
                    if (mUninstalledAppInfo != null)
                    {
                        mUnknownAppInfoList.remove(mUninstalledAppInfo);
                        mUnknownAppCount = mUnknownAppInfoList.size();
                    } // end if
                    if (mMalwareListItemCount > 0)
                    {
                        mGroupListViewSectionMalwareList.removeFrom(mGroupListViewMalwareResults);
                        mGroupListViewSectionMalwareList.setTitle(getString(R.string.malware_malwareList_title) + " (" + mMalwareListItemCount + "/" + mNonSystemAppCount + ")");
                        mGroupListViewSectionMalwareList.addTo(mGroupListViewMalwareResults);
                    } // end if
                    initialiseUnknownAppList();
                    updateUnknownAppList();
                    if (mBenignAppCount > 0)
                    {
                        mGroupListViewSectionBenignAppList.removeFrom(mGroupListViewMalwareResults);
                        mGroupListViewSectionBenignAppList.setTitle(getString(R.string.malware_benignAppList_title) + " (" + mBenignAppCount + "/" + mNonSystemAppCount + ")");
                        mGroupListViewSectionBenignAppList.addTo(mGroupListViewMalwareResults);
                    } // end if
                    updateFinalResults();
                    break;

                case BENIGN_APP_UNINSTALLING_REQUEST:
                    if (mUninstalledAppInfo != null)
                    {
                        mBenignAppInfoList.remove(mUninstalledAppInfo);
                        mBenignAppCount = mBenignAppInfoList.size();
                    } // end if
                    if (mMalwareListItemCount > 0)
                    {
                        mGroupListViewSectionMalwareList.removeFrom(mGroupListViewMalwareResults);
                        mGroupListViewSectionMalwareList.setTitle(getString(R.string.malware_malwareList_title) + " (" + mMalwareListItemCount + "/" + mNonSystemAppCount + ")");
                        mGroupListViewSectionMalwareList.addTo(mGroupListViewMalwareResults);
                    } // end if
                    if (mUnknownAppCount > 0)
                    {
                        mGroupListViewSectionUnknownAppList.removeFrom(mGroupListViewMalwareResults);
                        mGroupListViewSectionUnknownAppList.setTitle(getString(R.string.malware_unknownAppList_title) + " (" + mUnknownAppCount + "/" + mNonSystemAppCount + ")");
                        mGroupListViewSectionUnknownAppList.addTo(mGroupListViewMalwareResults);
                    } // end if
                    initialiseBenignAppList();
                    updateBenignAppList();
                    updateFinalResults();
            } // end switch...case

            ViewUtils.fadeIn(mImageViewMalware, mAnimationDuration, null);
            ViewUtils.fadeIn(mTextViewMalwareRationale, mAnimationDuration, null);
        }
        else
            rescan();
    } // end method updateResults

    // update the section of the benign app list in the group list view
    private void updateBenignAppList()
    {
        if (mBenignAppCount > 0)
        {
            for (ApplicationInfo benignAppInfo : mBenignAppInfoList)
            {
                XUICommonListItemView commonListItemViewBenignApp = mGroupListViewMalwareResults.createItemView(
                        mNonSystemAppIconMap.get(benignAppInfo.packageName),
                        mNonSystemAppNameMap.get(benignAppInfo.packageName),
                        null,
                        XUICommonListItemView.HORIZONTAL,
                        XUICommonListItemView.ACCESSORY_TYPE_CUSTOM);
                IconicsImageView imageViewBenignApp = new IconicsImageView(this);
                View.OnClickListener onClickListenerApp = view -> startUninstalling(benignAppInfo, BENIGN_APP_UNINSTALLING_REQUEST);
                imageViewBenignApp.setIcon(new IconicsDrawable(this)
                        .icon(Ionicons.Icon.ion_checkmark_round)
                        .color(new IconicsColorInt(getColor(R.color.colourPass)))
                        .size(new IconicsSizeDp(AppInitialiser.RESULT_ICON_SIZE)));
                commonListItemViewBenignApp.addAccessoryCustomView(imageViewBenignApp);
                mGroupListViewSectionBenignAppList.addItemView(commonListItemViewBenignApp, onClickListenerApp);
            } // end for

            mGroupListViewSectionBenignAppList.setTitle(getString(R.string.malware_benignAppList_title) + " (" + mBenignAppCount + "/" + mNonSystemAppCount + ")");
            mGroupListViewSectionBenignAppList.addTo(mGroupListViewMalwareResults);
        } // end if
    } // end method updateBenignAppList

    // update views related to the final results
    private void updateFinalResults()
    {
        if (mMalwareListItemCount > 0)
        {
            mFinalResult = AppInitialiser.FinalResults.FAIL;

            mImageViewMalware.setIcon(new IconicsDrawable(this)
                    .icon(Ionicons.Icon.ion_android_alert)
                    .color(new IconicsColorInt(Color.RED))
                    .size(new IconicsSizeDp(AppInitialiser.FINAL_RESULT_ICON_SIZE)));
            mTextViewMalwareRationale.setText(R.string.malware_textViewRationale_fail);
            mRoundButtonMalwareAction.setText(R.string.malware_roundButtonAction_fail);
        }
        else if (mUnknownAppCount > 0)
        {
            mFinalResult = AppInitialiser.FinalResults.UNKNOWN;

            mImageViewMalware.setIcon(mDrawableBigUnknown);
            mTextViewMalwareRationale.setText(R.string.textViewRationale_unknown_appError);
            mRoundButtonMalwareAction.setText(R.string.roundButtonAction_unknown);
        }
        else
        {
            mFinalResult = AppInitialiser.FinalResults.PASS;

            mImageViewMalware.setIcon(new IconicsDrawable(this)
                    .icon(Ionicons.Icon.ion_checkmark_circled)
                    .color(new IconicsColorInt(getColor(R.color.colourPass)))
                    .size(new IconicsSizeDp(AppInitialiser.FINAL_RESULT_ICON_SIZE)));
            mTextViewMalwareRationale.setText(R.string.textViewRationale_pass);
            mRoundButtonMalwareAction.setText(R.string.roundButtonAction_normal);
        } // end nested if...else
    } // end method updateFinalResults

    // update the section of the malware list in the group list view
    private void updateMalwareList()
    {
        if (mMalwareListItemCount > 0)
        {
            for (ApplicationInfo malwareInfo : mMalwareInfoList)
            {
                XUICommonListItemView commonListItemViewMalwareListItem = mGroupListViewMalwareResults.createItemView(
                        mNonSystemAppIconMap.get(malwareInfo.packageName),
                        mNonSystemAppNameMap.get(malwareInfo.packageName),
                        null,
                        XUICommonListItemView.HORIZONTAL,
                        XUICommonListItemView.ACCESSORY_TYPE_CUSTOM);
                IconicsImageView imageViewMalwareListItem = new IconicsImageView(this);
                View.OnClickListener onClickListenerApp = view -> startUninstalling(malwareInfo, MALWARE_UNINSTALLING_REQUEST);
                imageViewMalwareListItem.setIcon(new IconicsDrawable(this)
                        .icon(Ionicons.Icon.ion_alert)
                        .color(new IconicsColorInt(Color.RED))
                        .size(new IconicsSizeDp(AppInitialiser.RESULT_ICON_SIZE)));
                commonListItemViewMalwareListItem.addAccessoryCustomView(imageViewMalwareListItem);
                mGroupListViewSectionMalwareList.addItemView(commonListItemViewMalwareListItem, onClickListenerApp);
            } // end for

            mGroupListViewSectionMalwareList.setTitle(getString(R.string.malware_malwareList_title) + " (" + mMalwareListItemCount + "/" + mNonSystemAppCount + ")");
            mGroupListViewSectionMalwareList.addTo(mGroupListViewMalwareResults);
        } // end if
    } // end method updateMalwareList

    // update the section of the unknown app list in the group list view
    private void updateUnknownAppList()
    {
        if (mUnknownAppCount > 0)
        {
            for (ApplicationInfo unknownAppInfo : mUnknownAppInfoList)
            {
                XUICommonListItemView commonListItemViewUnknownApp = mGroupListViewMalwareResults.createItemView(
                        mNonSystemAppIconMap.get(unknownAppInfo.packageName),
                        mNonSystemAppNameMap.get(unknownAppInfo.packageName),
                        null,
                        XUICommonListItemView.HORIZONTAL,
                        XUICommonListItemView.ACCESSORY_TYPE_CUSTOM);
                IconicsImageView imageViewUnknownApp = new IconicsImageView(this);
                View.OnClickListener onClickListenerApp = view -> startUninstalling(unknownAppInfo, UNKNOWN_APP_UNINSTALLING_REQUEST);
                imageViewUnknownApp.setIcon(mDrawableUnknown);
                commonListItemViewUnknownApp.addAccessoryCustomView(imageViewUnknownApp);
                mGroupListViewSectionUnknownAppList.addItemView(commonListItemViewUnknownApp, onClickListenerApp);
            } // end for

            mGroupListViewSectionUnknownAppList.setTitle(getString(R.string.malware_unknownAppList_title) + " (" + mUnknownAppCount + "/" + mNonSystemAppCount + ")");
            mGroupListViewSectionUnknownAppList.addTo(mGroupListViewMalwareResults);
        } // end if
    } // end method updateUnknownAppList
} // end class ActivityMalware