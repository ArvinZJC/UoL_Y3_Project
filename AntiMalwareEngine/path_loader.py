'''
@Description: a directory/path loader
@Version: 1.0.0.20200322
@Author: Arvin Zhao
@Date: 2020-03-22 11:31:45
@Last Editors: Arvin Zhao
@LastEditTime: 2020-03-23 19:10:46
'''

import os

from logger import Logger


datasets_directory = 'datasets/'
log = Logger(os.path.basename(__file__), __name__) # initialise a logger


def get_benign_apps_directory() -> str:
    '''
    Get the directory of the benign app dataset.

    Returns
    -------
    benign_apps_directory : the directory of the benign app dataset
    '''

    benign_apps_directory = datasets_directory + 'benign'

    if not os.path.exists(benign_apps_directory):
        os.makedirs(benign_apps_directory)
        log.w('The benign app dataset might need checking because it contains nothing.')
    
    return benign_apps_directory


def get_malware_directory() -> str:
    '''
    Get the directory of the malware dataset.

    Returns
    -------
    malware_directory : the directory of the malware dataset
    '''

    malware_directory = datasets_directory + 'malicious'

    if not os.path.exists(malware_directory):
        os.makedirs(malware_directory)
        log.w('The malware dataset might need checking because it contains nothing.')
    
    return malware_directory


def get_dictionary_path() -> str:
    '''
    Get the path of the API call dictionary.

    Returns
    -------
    dictionary_path : the path of the API call dictionary
    '''

    return datasets_directory + 'api_call_dictionary.save'


def get_compressed_features_directories() -> list:
    '''
    Get the directory list of the datasets storing compressed features.

    Returns
    -------
    compressed_feature_directories : the directory list of the datasets storing compressed features
    '''

    compressed_features_main_directory = datasets_directory + 'compressed_features_main'
    compressed_features_sub_directory = datasets_directory + 'compressed_features_sub'

    if not os.path.exists(compressed_features_main_directory):
        os.makedirs(compressed_features_main_directory)
    
    if not os.path.exists(compressed_features_sub_directory):
        os.makedirs(compressed_features_sub_directory)

    return [compressed_features_main_directory, compressed_features_sub_directory]


# test purposes only
if __name__ == '__main__':
    get_benign_apps_directory()
    get_malware_directory()

    if not os.path.exists(get_dictionary_path()):
        log.w('Failed to find the API call dictionary. Some errors might occur.')
    
    get_compressed_features_directories()