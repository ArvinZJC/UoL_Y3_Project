'''
@Description: a decompressor
@Version: 1.1.0.20200325
@Author: Robin Nix and Jian Zhang
@Date: 2020-02-20 20:51:04
@Last Editors: Arvin Zhao
@LastEditTime: 2020-03-25 14:54:39
'''

import numpy as np


def decompress(feature_vector, num_dim):
    '''
    Decompress features to one-hot form.

    Parameters
    ----------
    feature_vector : features to be decompressed

    num_dim : 

    Returns
    -------
    one_hot_vector : a one-hot vector containing decompressed features
    '''

    segments = [] # used to get the one-hot vector

    for feature in feature_vector:
        segments.append(one_2d_to_3d(np.squeeze(feature), num_dim))

    one_hot_vector = np.vstack(segments)
    one_hot_vector = np.expand_dims(one_hot_vector, 3)

    return one_hot_vector


def one_2d_to_3d(a, new_dim):
    '''
    TODO:
    '''

    b = np.zeros((a.shape[0], a.shape[1], new_dim))
    layer_idx = np.arange(a.shape[0]).reshape(a.shape[0], 1)
    component_idx = np.tile(np.arange(a.shape[1]), (a.shape[0], 1))
    b[layer_idx, component_idx, a] = 1
    b = b.transpose(1, 0, 2)

    return b


# test purposes only
if __name__ == '__main__':
    a = np.arange(12).reshape(2, 2, 3, 1)
    print(decompress(a, 12).shape) # logger?